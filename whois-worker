#!/usr/bin/python

import ConfigParser
import os
import random
import subprocess
import sys
import tempfile
import time
import urllib
import urlparse

import requests

config = ConfigParser.ConfigParser()
config.readfp(open(
    os.path.join(os.path.dirname(__file__), 'default.conf')))
config.read(['/etc/whois-worker.conf',
    os.path.expanduser('~/.whois-worker.conf'),
    './whois-worker.conf'])

user=config.get('whois-worker', 'user')
password=config.get('whois-worker', 'password')

average_time = int(config.get('whois-worker', 'average_time'))
api_base_url = config.get('whois-worker', 'url')

request_url = urlparse.urljoin(api_base_url, 'request/')
upload_base_url = urlparse.urljoin(api_base_url, 'whois/')

def work_queue(request_url, user=None, password=None):
    error_sleep = 1
    while True:
        try:
            r = requests.get(request_url,
                    auth=(user,password),
                    stream=False,
                    verify=False)
            r.raise_for_status()

            error_sleep = 1
            for domain in r.text.split():
                yield domain
        except (requests.exceptions.HTTPError,
                requests.exceptions.ConnectionError), e:
            print e.message
            time.sleep(error_sleep)
            error_sleep = min(error_sleep*2, 60)

for domain in work_queue(request_url, user, password):
    print 'Processing %s' % domain
    t_start = time.time()

    buf = tempfile.TemporaryFile()
    errbuf = tempfile.TemporaryFile()
    try:
        subprocess.check_call(['whois', domain], stdout=buf, stderr=errbuf)
        buf.seek(0)
        errbuf.seek(0)

        upload_url = urlparse.urljoin(upload_base_url, urllib.quote(domain, safe=''))

        r = requests.get(upload_url,
            auth=(user,password),
            files={ 'file':
                ('%s.txt' % domain, buf.read(), 'text/plain') },
            stream=False,
            verify=False)
        r.raise_for_status()
    except subprocess.CalledProcessError, e:
        print errbuf.read()
    except (requests.exceptions.HTTPError,
            requests.exceptions.ConnectionError), e:
        print e.message

    t_end = time.time()
    t_sleep = random.expovariate(1.0/average_time) - (t_end - t_start)

    if t_sleep > 0:
        print 'Sleeping %f' % t_sleep
        time.sleep(t_sleep)
